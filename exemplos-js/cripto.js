/**
 * FunÃ§Ã£o assÃ­ncrona que gera o hash de uma senha em SHA-256
 * usando a API nativa de criptografia do navegador (Web Crypto API).
 */
async function hashPassword(password) {

    // ðŸ”¹ 1. Cria um codificador de texto
    // O TextEncoder transforma a string da senha em bytes (UTF-8)
    const encoder = new TextEncoder();
  
    // ðŸ”¹ 2. Converte a senha em uma sequÃªncia de bytes
    const data = encoder.encode(password);
  
    // ðŸ”¹ 3. Gera o hash criptogrÃ¡fico SHA-256
    // Essa operaÃ§Ã£o Ã© assÃ­ncrona â€” por isso usamos "await"
    const hashBuffer = await crypto.subtle.digest('SHA-256', data);
  
    // ðŸ”¹ 4. Converte o ArrayBuffer (resultado binÃ¡rio) em um array de bytes
    const hashArray = Array.from(new Uint8Array(hashBuffer));
  
    // ðŸ”¹ 5. Converte cada byte em um valor hexadecimal
    // toString(16) â†’ transforma nÃºmero em base 16 (hex)
    // padStart(2, '0') â†’ garante que tenha sempre 2 dÃ­gitos por byte
    const hashHex = hashArray.map(b => b.toString(16).padStart(2, '0')).join('');
  
    // ðŸ”¹ 6. Retorna a string final (hash em formato hexadecimal)
    return hashHex;
  }
  